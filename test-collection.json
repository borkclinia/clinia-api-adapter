{
  "info": {
    "name": "Clinia API Adapter - Complete Test Suite",
    "description": "Comprehensive test collection for all Clinia API adapter endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000/api/v1"
    }
  ],
  "item": [
    {
      "name": "Health Insurances",
      "item": [
        {
          "name": "Get Health Insurances",
          "request": {
            "method": "GET",
            "url": "{{baseUrl}}/health-insurances"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct structure', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData).to.have.property('pagination');",
                  "    pm.expect(jsonData).to.have.property('metadata');",
                  "});",
                  "",
                  "pm.test('Health insurance data structure is correct', function () {",
                  "    const jsonData = pm.response.json();",
                  "    if (jsonData.data && jsonData.data.length > 0) {",
                  "        const insurance = jsonData.data[0];",
                  "        pm.expect(insurance).to.have.property('id');",
                  "        pm.expect(insurance).to.have.property('name');",
                  "        pm.expect(insurance).to.have.property('plans');",
                  "        pm.expect(insurance).to.have.property('active');",
                  "    }",
                  "});",
                  "",
                  "// Store first ID for individual test",
                  "const jsonData = pm.response.json();",
                  "if (jsonData.data && jsonData.data.length > 0) {",
                  "    pm.globals.set('healthInsuranceId', jsonData.data[0].id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Health Insurance by ID",
          "request": {
            "method": "GET",
            "url": "{{baseUrl}}/health-insurances/{{healthInsuranceId}}"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Single health insurance structure is correct', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('name');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Professionals",
      "item": [
        {
          "name": "Get Professionals",
          "request": {
            "method": "GET",
            "url": "{{baseUrl}}/professionals"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Professional data structure is correct', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData).to.have.property('pagination');",
                  "    if (jsonData.data && jsonData.data.length > 0) {",
                  "        const professional = jsonData.data[0];",
                  "        pm.expect(professional).to.have.property('id');",
                  "        pm.expect(professional).to.have.property('name');",
                  "        pm.expect(professional).to.have.property('specialties');",
                  "        pm.expect(professional).to.have.property('active');",
                  "    }",
                  "});",
                  "",
                  "// Store first ID for individual test",
                  "const jsonData = pm.response.json();",
                  "if (jsonData.data && jsonData.data.length > 0) {",
                  "    pm.globals.set('professionalId', jsonData.data[0].id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Professional by ID",
          "request": {
            "method": "GET",
            "url": "{{baseUrl}}/professionals/{{professionalId}}"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Single professional structure is correct', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData.data).to.have.property('id');",
                  "    pm.expect(jsonData.data).to.have.property('name');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Specialties",
      "item": [
        {
          "name": "Get Specialties",
          "request": {
            "method": "GET",
            "url": "{{baseUrl}}/specialties"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Specialty data structure is correct', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    if (jsonData.data && jsonData.data.length > 0) {",
                  "        const specialty = jsonData.data[0];",
                  "        pm.expect(specialty).to.have.property('id');",
                  "        pm.expect(specialty).to.have.property('name');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Locations",
      "item": [
        {
          "name": "Get Locations",
          "request": {
            "method": "GET",
            "url": "{{baseUrl}}/locations"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Location data structure is correct', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('total');",
                  "    pm.expect(jsonData).to.have.property('locations');",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "});",
                  "",
                  "// Store first ID for individual test",
                  "const jsonData = pm.response.json();",
                  "if (jsonData.locations && jsonData.locations.length > 0) {",
                  "    pm.globals.set('locationId', jsonData.locations[0].id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Location by ID",
          "request": {
            "method": "GET",
            "url": "{{baseUrl}}/locations/{{locationId}}"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Single location structure is correct', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Client Search",
      "item": [
        {
          "name": "Search Clients",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/clients/search?search=test",
              "host": ["{{baseUrl}}"],
              "path": ["clients", "search"],
              "query": [
                {
                  "key": "search",
                  "value": "test"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Client search structure is correct', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData).to.have.property('pagination');",
                  "});",
                  "",
                  "// Store first ID for individual test",
                  "const jsonData = pm.response.json();",
                  "if (jsonData.data && jsonData.data.length > 0) {",
                  "    pm.globals.set('clientId', jsonData.data[0].id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Client by ID",
          "request": {
            "method": "GET",
            "url": "{{baseUrl}}/clients/{{clientId}}"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 404', function () {",
                  "    pm.expect([200, 404]).to.include(pm.response.code);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Single client structure is correct', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('success', true);",
                  "        pm.expect(jsonData).to.have.property('data');",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Schedules",
      "item": [
        {
          "name": "Get Schedules",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/schedules?professionalId=202&startDate=2025-08-01&endDate=2025-08-31",
              "host": ["{{baseUrl}}"],
              "path": ["schedules"],
              "query": [
                {
                  "key": "professionalId",
                  "value": "202"
                },
                {
                  "key": "startDate",
                  "value": "2025-08-01"
                },
                {
                  "key": "endDate",
                  "value": "2025-08-31"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Schedule data structure is correct', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Available Slots",
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/schedules/available-slots?date=2025-08-01&professionalId=202",
              "host": ["{{baseUrl}}"],
              "path": ["schedules", "available-slots"],
              "query": [
                {
                  "key": "date",
                  "value": "2025-08-01"
                },
                {
                  "key": "professionalId",
                  "value": "202"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Available slots structure is correct', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Appointments",
      "item": [
        {
          "name": "Get Appointments",
          "request": {
            "method": "GET",
            "url": "{{baseUrl}}/appointments"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Appointment data structure is correct', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData).to.have.property('pagination');",
                  "});",
                  "",
                  "// Store first ID for individual test",
                  "const jsonData = pm.response.json();",
                  "if (jsonData.data && jsonData.data.length > 0) {",
                  "    pm.globals.set('appointmentId', jsonData.data[0].id);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Appointment by ID",
          "request": {
            "method": "GET",
            "url": "{{baseUrl}}/appointments/{{appointmentId}}"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 or 404', function () {",
                  "    pm.expect([200, 404]).to.include(pm.response.code);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    pm.test('Single appointment structure is correct', function () {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('success', true);",
                  "        pm.expect(jsonData).to.have.property('data');",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Patients (Compatibility)",
      "item": [
        {
          "name": "Get Patients",
          "request": {
            "method": "GET",
            "url": "{{baseUrl}}/patients"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Patient data structure is correct', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}